/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : LIBJPN
 #	author : miyako
 #	12/07/20
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#include "functions_jis8.h"
#include "functions_icu4.h"
#include "functions_mcab.h"
#include "functions_icnv.h"

void PluginMain(int32_t selector, PA_PluginParameters params)
{
	try
	{
		int32_t pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (int32_t pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
		case kInitPlugin :
			InitPlugin_mcab();
			break;            
// --- ICU

		case 1 :
			ICU_GET_ENCODING_LIST(pResult, pParams);
			break;

		case 2 :
			ICU_Get_good_encodings(pResult, pParams);
			break;

		case 3 :
			ICU_Get_best_encoding(pResult, pParams);
			break;

		case 4 :
			ICU_Normalize_text(pResult, pParams);
			break;

		case 5 :
			ICU_Transform_text(pResult, pParams);
			break;

		case 6 :
			ICU_Get_error_text(pResult, pParams);
			break;

		case 7 :
			ICU_Convert_to_text(pResult, pParams);
			break;

		case 8 :
			ICU_Convert_from_text(pResult, pParams);
			break;

// --- mecab

		case 9 :
			_mecab(pResult, pParams);
			break;

// --- iconv

		case 10 :
			_iconv(pResult, pParams);
			break;

// --- JIS

		case 11 :
			JIS_Convert_to_text(pResult, pParams);
			break;

		case 12 :
			JIS_Convert_from_text(pResult, pParams);
			break;

	}
}